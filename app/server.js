// Services backend for hsu-tramitador
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AppNow (http://appnow.radarconline.com) 
//     Code-gen engine version: 4.5.2.30102 
//     MEAN generator version:  0.3.0.2
//     at:                      3/2/2015 10:03:22 AM UTC
// </auto-generated>
//------------------------------------------------------------------------------

var express = require('express');
var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var session = require('express-session');
var morgan = require('morgan');
var mongoose = require('mongoose');
var baucis = require('baucis');
var swagger = require('baucis-swagger');
var models = require('./model');
var auth = require('./conf/auth');
var imp = require('./import');
var https = require("https");

var dbCnx = resolveMongoDbCnx();
mongoose.connect(dbCnx);

process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';  //Ignore invalid SSL certs


function resolveMongoDbCnx() {
  if (process.env.VCAP_SERVICES) {
    var vCap = JSON.parse(process.env.VCAP_SERVICES);

    if (vCap['mongodb-2.2']) {
      return vCap['mongodb-2.2'][0].credentials.url || 
             'mongodb://localhost:27017/DemoDb';
    }
    else{
      return vCap['mongodb-2.4'][0].credentials.url || 
             'mongodb://localhost:27017/DemoDb';
    }
  }
  return process.env.MONGOLAB_URI || 
         'mongodb://localhost:27017/DemoDb';
}

var csvSupport = require('./baucis-csv.js');
csvSupport.apply(baucis);

// Create the express app 
var app = express();
app.use(morgan('dev'));
//var swagger = new Swagger(baucis);

// Pluralize and set resources names
models.TramiteModel.plural('tramites');

// Create the API routes & controllers
var tramiteController = baucis.rest('tramite', models.TramiteModel);

//Add export functionality
tramiteController.get('/download/csv', function(req, res, done){
  models.TramiteModel.where().exec(function (err, objects) {
    res.status(200)
       .type('text/csv')
       .attachment('tramites.csv')
       .send(models.toCsv(objects, 'tramite'))
       .end();  
    done();
  });
});
tramiteController.get('/download/xlsx', function(req, res, done){
  models.TramiteModel.where().exec(function (err, objects) {
    res.status(200)
       .type('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
       .attachment('tramites.xlsx')
       .send(models.toXlsx(objects, 'tramite'))
       .end(); 
    done();
  });
});
tramiteController.get('/download/xml/', function(req, res, done){
  models.TramiteModel.where().exec(function (err, objects) {
    res.status(200)
       .type('text/xml')
       .attachment('tramites.xml')
       .send(models.toXml(objects, 'tramite'))
       .end(); 
    done();
  });
});


tramiteController.query('put', function (request, response, next) {
    //Inject webhook
    invokeWebhook(request, response, next);
});

function invokeWebhook(request, response, next) {
    
    var conf = auth.webhooks.notify;
    console.log("Call webhook on server POST to: "+ conf.baseUrl + ':' + conf.port + conf.path);

    var msg = {
        '_id': request.body._id,
        'type': request.body.type,
        'origin': request.body.origin,
        'originId': request.body.originId,
        'state': request.body.state,
        'created': request.body.created,
        'lastModified': request.body.lastModified,
        'description': request.body.description,
        'assignedTo': request.body.assignedTo
    };
    var body = JSON.stringify(msg);

    //POST
    var options = {
        host: conf.baseUrl,
        port: conf.port,
        path: conf.path, // + request.body.originId,
        method: 'POST',
        headers: { 
            //'Origin': 'https://hsu-tramitador.herokuapp.com',
            'Accept': 'application/json',
            'Host'  :  conf.baseUrl +':'+ conf.port,
            //'Authorization': 'Basic ' + new Buffer(conf.user + ':' + conf.password).toString('base64'),
            'apikey':  conf.password,
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(body)
        }        
    };

    console.log('Sending to '+options.method+' https://'+ options.host + ':' + options.port + options.path + '\n' +
                JSON.stringify(options.headers) + '\n\n' +
                body + '\n\nSize: '+Buffer.byteLength(body));

    var output='';
    var req2 = https.request(options, function(resp){
        console.log('STATUS: ' + resp.statusCode);
        console.log('HEADERS: ' + JSON.stringify(resp.headers));
        resp.setEncoding('utf8');
        resp.on('data', function(chunk){
            output += chunk;
        });
        resp.on('end', function() {
            console.log('Callback Response:\n'+ output);
          
        });
    }).on("error", function(e){
        console.error("Callback got error: " + e.message);
    });

    req2.write(body);
    req2.end();

    next();
}


app.use(bodyParser.urlencoded({
  extended: true,
  limit: '50mb'
}));
app.use(bodyParser.json({
  limit: '50mb'
}));

app.use(cookieParser());
app.use(session({ 
	secret: auth.security.apiKey,
	resave: true,
	saveUninitialized: true
}));


//Simple Portal ApiKey based auth ------
app.post('/weblogin', function(req, res) {
	if (req.body.apikey == auth.security.apiKey) {
		res.cookie('apikey', req.body.apikey);
		res.status(200).send('{"id": 0, "user": {"id":0, "role": "admin"} }');
	}
	else {
		res.cookie('apikey', null);
		res.status(401).send('Unauthorized.');
	}
});

app.post('/webLogout', function(req, res) {
  res.clearCookie('apikey');
  res.status(200).send('OK');
});

app.post('/api/import', function(req, res) {
  return imp.importData(req, res);
});

//Add extra functionality
app.post('/api/delete', function(req,res){
  var className = req.body.className;
  var ids = req.body.ids;
  var model = models.getModelForClass(className);
  for(var index in ids) {
    var idItem = ids[index];
    model.findOneAndRemove( {'_id': idItem}, logError);
  }    
  res.status(200)
     .set('Content-Type', 'text/json')
     .send('');
});

function logError(err, doc) {
  if (doc) {
    // console.log('Deleted object: ' + doc);
  }
  if (err) {
    console.error(err);
  }
}

app.post('/api/deleteAll', function(req,res){
  try {
    var className = req.body.className;
    var model = models.getModelForClass(className);
    console.log("DeleteAll: " + req.body.conditions);
    var criteria = "";
    if (req.body.conditions != null && req.body.conditions !=="") {
      criteria = JSON.parse(req.body.conditions);
      model.remove(criteria).exec();
    } else {
      //delete all
      model.remove().exec();    
    }
        
    res.status(200)
       .set('Content-Type', 'text/json')
       .send('{}');
  }
  catch (e) {
    res.status(401)
       .set('Content-Type', 'text/json')
       .send('{ "error" : "Invalid query"}');
  }
});

//Error handler
app.use(function(err, req, res, next) {
  console.error(req.query);
  console.error(err.stack);
});


//CORS enabled for allowing 3rd party web-apps to consume Swagger metadata and backend. 
//Disable it commenting this block if you don not need it. ----------
app.all('*', function(req, res, next) {
	res.header("Access-Control-Allow-Origin", "*");  //Change * to your host domain
	res.header("Access-Control-Allow-Headers", "X-Requested-With, Content-Type");
	res.header("Access-Control-Allow-Methods", "OPTIONS,GET,POST,PUT,DELETE");
    next();
});


//Auth ----------
app.all('*', function(req, res, next) {
	if (req.url.substr(0,5) != '/api/'){
		return next();
	}
	return isLoggedIn(req, res, next);
});

function isLoggedIn(req, res, next) {
	var incomingKey = getHeaderOrParam(req, 'apikey');
	if (incomingKey == auth.security.apiKey){
		return next();
	}
	incomingKey = getHeaderOrParam(req, 'api_key');
	if (incomingKey == auth.security.apiKey){
		return next();
	}	
	res.status(401).send('Unathorized.');
}

function getHeaderOrParam(req, key){
	var cookie = req.cookies[key];
	if (cookie !== undefined) { 
    return cookie; 
  }
	var header = req.headers[key];
	if (header !== undefined) { 
    return header; 
  }
	return req.query[key];
}

var httpRootPath = __dirname + '/../public';

app.use('/api', baucis());
app.use('/', express.static(httpRootPath));

var appPort = (process.env.VCAP_APP_PORT || process.env.PORT || 5000);
var appHost = (process.env.VCAP_APP_HOST || 'localhost');

app.listen(appPort);
//app.listen(appPort, appHost);

//swagger.finalize(app);

console.log('hsu-tramitador - Server listening on: '+ appHost + ':' + appPort );
console.log('\tResource Tramite                        on   /api/tramites');
console.log('\tSwagger docs                            on   /api/api-docs');
console.log('\tAngularJS admin web-client              on   /');
console.log('\tServing static www content from:             ' + httpRootPath);
